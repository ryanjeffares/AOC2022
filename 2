import std::dict;
import std::file;
import std::gc;
import std::list;
import std::path;
import std::string;

class File:
  var name: String;
  var size: Int;

  constructor(n, s):
    name = n;
    size = s;
  end
end

class Directory:
  var parent: Directory;
  var name: String;
  var dirs: List;
  var files: List;

  constructor(p, n):
    parent = p; 
    name = n;
    dirs = [];
    files = [];
  end
end

func get_size(this Directory dir, final sizes: List) :: Int:
  var size = 0;
  for f in dir.files:
    size += f.size;
  end

  for d in dir.dirs:
    size += d.get_size(sizes);
  end

  sizes.append(size);
  return size;
end

func get_dir(this Directory dir, name: String) :: Directory:
  for d in dir.dirs:
    if d.name == name:
      return d;
    end
  end

  throw("No dir named " + name + " found in dir " + dir.name);
end

func solve(final input: List):
  final root = Directory(null, "/");
  var current_dir = root;

  for i in [1..input.length()]:
    final line = input[i];
    final split = line.split(' ');

    if split[0] == "$":
      if split[1] == "cd":
        var new_dir_name = split[2];
        if new_dir_name == "..":
          current_dir = current_dir.parent;
        else:
          current_dir = current_dir.get_dir(new_dir_name);
        end
      end
    else if split[0] == "dir":
      current_dir.dirs.append(Directory(current_dir, split[1]));
    else:
      final size = Int(split[0]);
      final name = split[1];
      current_dir.files.append(File(name, size));
    end
  end

  final sizes = [];
  final root_size = root.get_size(sizes);

  var total = 0;
  for s in sizes:
    if s <= 100000:
      total += s;
    end
  end

  assert(total == 1581595);
  println("Total size of directories <= 100000: " + total);

  final amount_to_free = root_size - 40000000;
  sizes.sort();
  for s in sizes:
    if s >= amount_to_free:
      assert(s == 1544176);
      println("Need to free directory with size: " + s);
      break;
    end
  end
end

func main():
  std::gc::set_enabled(false);  // we have a gc bug!

  final input_file = std::path::Path(__FILE).get_directory().combine("input.txt");
  final input_lines = std::file::read_all_lines(input_file.data);

  solve(input_lines);
end
