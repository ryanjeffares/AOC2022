import std::dict;
import std::file;
import std::list;
import std::path;
import std::string;

class File:
  var name: String;
  var size: Int;

  constructor(n, s):
    name = n;
    size = s;
  end
end

class Directory:
  var name: String;
  var dirs: List;
  var files: List;

  constructor(n):
    name = n;
    dirs = [];
    files = [];
  end
end

func get_size(this Directory dir) :: Int:
  var size = 0;
  for file in dir.files:
    size += file.size;
  end

  for dir in dir.dirs:
    size += dir.get_size();
  end

  return size;
end

func problem_one(final input: List) :: Int:
  final nav_stack = [];
  final dirs = {};

  for line in input:
    final split = line.split(' ');

    println(line);
    if split[0] == "$":
      var test;
      if split[1] == "cd":
        final dir_name = split[2];
        if dir_name == "..":
          nav_stack.pop();
        else:
          nav_stack.append(dir_name);
          if !dirs.contains_key(dir_name):
            dirs.insert(dir_name, Directory(dir_name));
          end
        end
      end
    else if split[0] == "dir":
      final dir_name = split[1];

      if dirs.contains_key(dir_name):
        dirs[nav_stack.last()].dirs.append(dirs[dir_name]);
      else:
        final new_dir = Directory(dir_name);
        dirs.insert(dir_name, new_dir);
        dirs[nav_stack.last()].dirs.append(new_dir);
      end
    else:
      final size = Int(split[0]);
      final name = split[1];
      dirs[nav_stack.last()].files.append(File(name, size));
    end
  end

  var total = 0;
  for dir_name, dir in dirs:
    final size = dir.get_size();
    if size < 100000:
      total += size;
    end
  end

  return total;
end

func main():
  final input_file = std::path::Path(__FILE).get_directory().combine("input.txt");
  final input_lines = std::file::read_all_lines(input_file.data);

  println(problem_one(input_lines));
end
