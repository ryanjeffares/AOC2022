import std::file;
import std::list;
import std::path;
import std::string;
import std::time;

func problem_two(input: List) :: Int:
  var score = 0;
  for line in input:
    var opponent_played = Int(line[0]) - Int('A');
    var outcome = Int(line[2]) - Int('X');

    score += outcome * 3;

    if outcome == 0:
      var losing_shape = opponent_played - 1;
      if losing_shape < 0:
        losing_shape = 2;
      end
      score += losing_shape + 1;
    else if outcome == 1:  // draw 
      score += opponent_played + 1;
    else if outcome == 2: // win
      score += ((opponent_played + 1) % 3) + 1;
    end
  end

  return score;
end

func problem_one(input: List) :: Int:
  var score = 0;
  for line in input:
    var opponent_played = Int(line[0]) - Int('A');
    var player_played = Int(line[2]) - Int('X');

    score += player_played + 1;
    if player_played == opponent_played:
      score += 3;
    else if (opponent_played + 1) % 3 == player_played:
      score += 6;
    end
  end

  return score;
end

func main(final args: List):
  var file_path = std::path::Path(__FILE);
  var input_path = file_path.get_directory().combine("input.txt");

  var input = std::file::read_all_lines(input_path.data);

  var timer = std::time::TimePoint();
  var p1 = problem_one(input);
  var elapsed = timer.elapsed_formatted();
  assert(p1 == 12535);
  println("Problem 1: " + p1 + ", completed in " + elapsed);

  timer = std::time::TimePoint();
  var p2 = problem_two(input);
  elapsed = timer.elapsed_formatted();
  assert(p2 == 15457);
  println("Problem 2: " + p2 + ", completed in " + elapsed);

end
